<!--#config timefmt="%d %b %Y" -->
<!--#set var="title" value="Texts : Letters : Correspondence Network" -->
<!--#set var="youarehere" value="<li><a href=\"/\" class=\"breadcrumb\">Home</a></li><li><a href=\"/texts/\" class=\"breadcrumb\">Texts</a></li><li><a href=\"/texts/letters.shtml\" class=\"breadcrumb\">Letters</a></li><li>Correspondence Network</li>" -->
<!--#set var="bodyid" value="texts"  -->
<!--#set var="texts" value="active" -->
<!--#include virtual="/top.shtml" -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>

    <!-- Begin page content -->
    <div class="container">
      <div class="row">
        <div class="col-xs-12">
            
          <section id="main">
          <style>
            .links line {
              stroke: #999;
              stroke-opacity: 0.6;
            }			
            .nodes circle {
              stroke: #fff;
              stroke-width: 1.5px;
            }
            text {
              font-family: sans-serif;
              font-size: 10px;
            }
            .corresponds {
              display: inline-block;
              position: relative;
              z-index: 1;
              padding: 0 15px;
            }
            .corresponds:before {
              display: inline-block;
              border-top: 2px solid #ddd;
              content: "";
              margin: 0 auto;
              /* this centers the line to the full width specified */
              position: absolute;
              /* positioning must be absolute here, and relative positioning must be applied to the parent */
              top: 50%;
              left: 0;
              right: 0;
              bottom: 0;
              width: 95%;
              z-index: -1;
            }
            .corresponds:nth-of-type(1):before{
              border-top: 2px solid #999;
            }
            .corresponds span {
              /* to hide the lines from behind the text, you have to set the background color the same as the container */
              display: inline-block;
              background: #fff;
            }
            #key, #filter, #filter div {
              display:inline-block;
              font-size:16px;
              position: relative;
              border-bottom-right-radius: 3px;
              border-bottom-left-radius: 3px;
              border-top-right-radius: 3px;
              border-top-left-radius: 3px;
              height: 14px;
            }
            #key {
              margin-top:-2px;
            }
            #filter {
              margin-top: 2px;
            }
            .legend-dot {
                height: 11px;
                width: 11px;
                border-radius: 50%;
                display: inline-block;
            }
            .map-marker-icon {
                background: darkblue;
                border-color: #ccc;
                border-radius: 50%;
                border-style: solid;
                border-width: 1px;
            }
            .map-marker-icon.addressee {
                background: darkorange;
                border-color: #ccc;
            }
            .map-marker-icon.topic-literary {
                background: #b5838d;
                border-color: #ccc;
            }
            .map-marker-icon.topic-people {
                background: #ffcdb2;
                border-color: #ccc;
            }
            .map-marker-icon.topic-places {
                background: #e5989b;
                border-color: #ccc;
            }
            .map-marker-icon.topic-poems {
                background: #6d6875;
                border-color: #ccc;
            }
            .map-marker-icon.topic-editions {
                background: #ffb4a2;
                border-color: #ccc;
            }
            #reset {
              font-family: 'Open Sans';
              font-weight:700;
              margin-bottom: 2px;
            }
            #slider-range {
              width: 300px;
              margin: 0 10px;
              color:#79211F;
            }
            #year-range {
              width: 80px;
              max-width: 75px;
            }
            .ui-widget.ui-widget-content {
              border: 1px solid #c5c5c5;
              top: 2px;
            }
            .ui-slider-horizontal .ui-slider-range {
                top: 0;
                height: 100%;
            }
            .ui-slider .ui-slider-range {
                position: absolute;
                z-index: 1;
                font-size: .7em;
                display: block;
                border: 0;
                background-position: 0 0;
                background: #e9e9e9;
            }
            .ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default, .ui-button, html .ui-button.ui-state-disabled:hover, html .ui-button.ui-state-disabled:active {
                border: 1px solid #c5c5c5;
                background: #f6f6f6;
                font-weight: normal;
                color: #454545;
            }
            .ui-slider-horizontal .ui-slider-handle {
                top: -0.3em;
                margin-left: -0.6em;
            }
            .ui-slider .ui-slider-handle {
                position: absolute;
                z-index: 2;
                width: 1.2em;
                height: 1.2em;
                cursor: default;
                -ms-touch-action: none;
                touch-action: none;
                border-bottom-right-radius: 3px;
                border-bottom-left-radius: 3px;
                border-top-right-radius: 3px;
                border-top-left-radius: 3px;
                top: -3px;
                margin-left: -0.6em;
            }
            .ui-widget-header {
                border: 1px solid #ddd;
                background: #e9e9e9;
                color: #333;
                font-weight: bold;
            }
            </style>
            <h1 style="vertical-align:bottom;display:inline-flex;">Correspondence &nbsp; &nbsp;
              <div id="key"><b>Key:</b>
                <i class="legend-dot map-marker-icon" style="margin-left:14px;"></i> Gray 
                  <span class="corresponds"><span>corresponds with</span></span> 
                <i class="legend-dot map-marker-icon addressee"></i> Correspondents 
                  <span class="corresponds"><span>corresponds about</span></span> 
                Topics:
                <i class="legend-dot map-marker-icon
                  topic-literary"></i> Literary &nbsp;
                <i class="legend-dot map-marker-icon
                  topic-places"></i> Places &nbsp;
                <i class="legend-dot map-marker-icon
                  topic-poems"></i> Poems &nbsp;
                <i class="legend-dot map-marker-icon
                  topic-editions"></i> Editions
                <br>
                <div id="filter"><b>Filter:</b>&nbsp; 
                  <i class="legend-dot map-marker-icon addressee"></i> 
                  <div id="correspondents"></div>
                  &nbsp;|&nbsp;  
                  <span class="glyphicon glyphicon-calendar" aria-hidden="true"></span>
                  <div id="slider-range"></div>
                  <div>
                    <label for="year-range">Date range:</label>
                    <input type="text" id="year-range" readonly style="border:0; color:#79211F; font-weight:bold;">
                  </div>
                  &nbsp; |&nbsp; 
                  <button id="reset" type="button" class="btn btn-default
                  btn-xs" style="background-color: #79211F; color:#fff;">Reset</button>
                </div>
              </div>
            </h1>
            <canvas id="canvas" height="830" width="1140"></canvas>

          </section> <!-- end main section -->

        </div>
      </div>
    </div>

<script>

  var citation = "";
  citation += "Huber, Alexander. ";
  var citlink = 'https:\/\/<!--#echo var="HTTP_HOST" --><!--#echo var="DOCUMENT_URI" -->';
  citation += '\"Correspondence Network\". ';
  citation +='<em>Thomas Gray Archive</em>, '+
    '<!--#flastmod virtual="/texts/letters/network.shtml" -->'+
    '. Web. <!--#echo var="DATE_LOCAL" -->. &lt;<a href="'+citlink+'">'+citlink+'</a>&gt;';


// https://observablehq.com/@fbunt/d3-force-directed-graph-on-canvas-with-drag-pan-and-zoom
// This D3 visualization works up to and including D3v5 (current [2022] is v7
// â€” apparently the events model changed in v6, which breaks zooming/panning)
// => important to check D3 version of any examples!

forceGraph = (data) => {
  const w2 = width / 2,
        h2 = height / 2,
        nodeRadius = 5;

  canvas = document.getElementById('canvas');
  ctx = canvas.getContext("2d"); // DOM.context2d(width, height);

  const simulation = forceSimulation(width, height);
  let transform = d3.zoomIdentity;

  // The simulation will alter the input data objects so make
  // copies to protect the originals.
  const nodes = data.nodes.map(d => Object.assign({}, d));
  const edges = data.links.map(d => Object.assign({}, d));

  var closeNode;
  d3.select(canvas)
    .call(d3.drag()
          // Must set this in order to drag nodes. New in v5?
          .container(canvas)
          .subject(dragSubject)
          .on('start', dragStarted)
          .on('drag', dragged)
          .on('end', dragEnded))
    .call(d3.zoom()
          .scaleExtent([1 / 10, 8])
          .on('zoom', zoomed))
    // https://stackoverflow.com/questions/38271595/tooltips-with-canvas-networks
    .on("mousemove", function(d){
          var p = d3.mouse(this);
          currentZoom = transform;
          var zp = transform.invert(p);
          closeNode = simulation.find(zp[0], zp[1]);
          simulationUpdate();
    });

  simulation.nodes(nodes)
    .on("tick",simulationUpdate);
  simulation.force("link")
    .links(edges);

  function zoomed() {
    transform = d3.event.transform;
    simulationUpdate();
  }
  
  /** Find the node that was clicked, if any, and return it. */
  function dragSubject() {
    const x = transform.invertX(d3.event.x),
          y = transform.invertY(d3.event.y);
    const node = findNode(nodes, x, y, nodeRadius);
    if (node) {
      node.x =  transform.applyX(node.x);
      node.y = transform.applyY(node.y);
    }
    // else: No node selected, drag container
    return node;
  }

  function dragStarted() {
    if (!d3.event.active) {
      simulation.alphaTarget(0.3).restart();
    }
    d3.event.subject.fx = transform.invertX(d3.event.x);
    d3.event.subject.fy = transform.invertY(d3.event.y);
  }

  function dragged() {
    d3.event.subject.fx = transform.invertX(d3.event.x);
    d3.event.subject.fy = transform.invertY(d3.event.y);
  }

  function dragEnded() {
    if (!d3.event.active) {
      simulation.alphaTarget(0);
    }
    d3.event.subject.fx = null;
    d3.event.subject.fy = null;
  }

  function simulationUpdate() {
    ctx.save();
    ctx.clearRect(0, 0, width, height);
    ctx.translate(transform.x, transform.y);
    ctx.scale(transform.k, transform.k);
    // Draw edges
    edges.forEach(function(d) {
      ctx.beginPath();
      ctx.moveTo(d.source.x, d.source.y);
      ctx.lineTo(d.target.x, d.target.y);
      ctx.lineWidth = Math.sqrt(d.value);
      if (d.group > 2) { 
        ctx.strokeStyle = '#eee'; // topics
      } else {
        ctx.strokeStyle = '#aaa'; // correspondents
      }
      ctx.stroke();
    });
    // Draw nodes
    nodes.forEach(function(d, i) {
      ctx.beginPath();
      // Node fill
      ctx.moveTo(d.x + nodeRadius, d.y);
      ctx.arc(d.x, d.y, nodeRadius, 0, 2 * Math.PI);
      ctx.fillStyle = color[d.group];
      ctx.fill();
      if (d.group == 1 ) { ctx.font = "14px Arial"; ctx.fillText( d.label, d.x+5, d.y-2 ) } // Gray
      else if (d.group == 2 ) { ctx.font = "12px Arial"; ctx.fillText( d.label, d.x+5, d.y-2 ) } // correspondents
      else if (transform.k >= 3 && d.group > 2) { // topics
        var text = d.label;
        if ( d.group == 6 ) { // poems
          text = poems[ d.label ][ "label" ]
        }
        else if ( d.group == 7 ) { // editions
          text = editions[ d.label ][ "label" ]
        }
        if (text.includes( '<i>' )) {
          ctx.font = "italic 6px Arial";
        } else {
          ctx.font = "6px Arial";
        }
        ctx.fillText( text.replace(/<\/?[^>]+(>|$)/g, ""), d.x+5, d.y-2 ) 
      }
      // Node outline
      ctx.strokeStyle = '#fff'
      ctx.lineWidth = 1.5
      ctx.stroke();
    });
    if (closeNode) { // highlight node and
      edges.forEach(function(d) { // highlight connections
        if (closeNode.id === d.source.id || closeNode.id === d.target.id ) {
          ctx.beginPath();
          ctx.moveTo(d.source.x, d.source.y);
          ctx.lineTo(d.target.x, d.target.y);
          ctx.lineWidth = Math.sqrt(d.value);
          if (d.group > 2) { 
            ctx.strokeStyle = '#f99'; // topics
          } else {
            ctx.strokeStyle = '#f33'; // correspondents
          }
          ctx.lineWidth = 1;
          ctx.stroke();          
        }
      });
      ctx.beginPath();
      ctx.moveTo(closeNode.x + nodeRadius, closeNode.y);
      ctx.arc(closeNode.x, closeNode.y, nodeRadius, 0, 2 * Math.PI);
      ctx.fillStyle = color[closeNode.group];
      ctx.fill();
      if (closeNode.group == 1 ) { ctx.font = "14px Arial"; ctx.fillText( closeNode.label, closeNode.x+5, closeNode.y-2 ) } // Gray
      else if (closeNode.group == 2 ) { ctx.font = "12px Arial"; ctx.fillText( closeNode.label, closeNode.x+5, closeNode.y-2 ) } // correspondents
      else if (closeNode.group > 2) { // topics
        var text = closeNode.label;
        if ( closeNode.group == 6 ) { // poems
          text = poems[ closeNode.label ][ "label" ]
        }
        else if ( closeNode.group == 7 ) { // editions
          text = editions[ closeNode.label ][ "label" ]
        }
        if (transform.k < 3) { 
          if (text.includes( '<i>' )) {
            ctx.font = "italic 10px Arial";
          } else {
            ctx.font = "10px Arial";
          }
        } else {
          if (text.includes( '<i>' )) {
            ctx.font = "italic 6px Arial";
          } else {
            ctx.font = "6px Arial";
          }
        }
        ctx.fillText( text.replace(/<\/?[^>]+(>|$)/g, ""), closeNode.x+5, closeNode.y-2 ) 
      }
      ctx.strokeStyle = "#ff0000";
      ctx.lineWidth = 1.5
      ctx.stroke();
    }
    ctx.restore();
  }
  return canvas;
}

function findNode(nodes, x, y, radius) {
    const rSq = radius * radius;
    let i;
    for (i = nodes.length - 1; i >= 0; --i) {
      const node = nodes[i],
            dx = x - node.x,
            dy = y - node.y,
            distSq = (dx * dx) + (dy * dy);
      if (distSq < rSq) {
        return node;
      }
    }
    // No node selected
    return undefined; 
}

function forceSimulation(width, height) {
  return d3.forceSimulation()
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("charge", d3.forceManyBody().strength(-105))
    .force("link", d3.forceLink().id(d => d.id));
}

var height = 830;
var width = 1140;
var graph;
data = d3.json("/data/network.json")
  .then(function(data){
    graph = data;
    forceGraph( data );
    setupFilters();
  })

// TODO:
// - display:
//   * investigate using occurrence values for sizing nodes and thickening edges (â€”)
// - filters:
//   x dropdown filter by correspondent (done)
//   x range slider by date of letter (done)
//   * play animation based on date (â€”)
//   x hover/click node/edge, e.g. node or neighbourhood highlighting (done)
//   x "reset visualization"-button (done)
//   * create jumps into letters pages/search results (â€”)

function updateFilters() {
  // deep copy data
  var nodes = graph.nodes.map(d => Object.assign({}, d));
  var edges = graph.links.map(d => Object.assign({}, d));
  var new_nodes = nodes, new_edges = edges;
  // filter by correspondents
  if ( jq("select#correspondents_list").val() != "all" ) {
    new_edges = new_edges.filter(obj => { return (
      ( obj.group == 2 && ( obj.target == jq("select#correspondents_list").val() || obj.source == jq("select#correspondents_list").val() ) )
      || ( obj.group == 3 && ( obj.source == jq("select#correspondents_list").val() || obj.with == jq("select#correspondents_list").val() ) )
    ) })
    new_nodes = new_nodes.filter(obj => { return ( 
      ( obj.id == jq("select#correspondents_list").val() // add correspondent
      || obj.group == 1 // add Gray
      || _.map(new_edges, 'target').includes( obj.id ) // add topics
      || _.map(new_edges, 'with').includes( obj.id ) ) 
    ) })
    var min = _.minBy(new_edges, 'date');
    var max = _.maxBy(new_edges, 'date');
    if (min && max && absoluteendyr == undefined && absolutestartyr == undefined) {
      jq( "#slider-range" ).slider("values", [min.date, max.date]);
      jq( "#year-range" ).val( min.date + "â€“" + max.date );
      absolutestartyr = min.date;
      absoluteendyr = max.date;
    } else if (min && max) {
      absolutestartyr = min.date;
      absoluteendyr = max.date;
    }
  }
  // filter by date
  new_edges = new_edges.filter(obj => { return (
    parseInt( obj.date ) >= parseInt( startyr ) && parseInt( obj.date ) <= parseInt( endyr )
  ) })
  new_nodes = new_nodes.filter(obj => { return (
    _.map(new_edges, 'source').includes( obj.id ) || _.map(new_edges, 'target').includes( obj.id ) || _.map(new_edges, 'with').includes( obj.id )
  ) })
  data.nodes = new_nodes;
  data.links = new_edges;
  forceGraph( data );
}

jq( "#reset" ).on( "click", function() {
  startyr = 1734, endyr = 1771;
  absolutestartyr = undefined, absoluteendyr = undefined;
  jq( "#slider-range" ).slider("values", [startyr, endyr]);
  jq( "#year-range" ).val( startyr + "â€“" + endyr );
  document.getElementById("correspondents_list").selectedIndex = 0;
  updateFilters();
});

var startyr = 1734;
var endyr = 1771;
var absolutestartyr = undefined, absoluteendyr = undefined;
jq( "#slider-range" ).slider({
  range: true,
  min: parseInt(startyr),
  max: parseInt(endyr),
  values: [ parseInt(startyr),parseInt(endyr) ],
  slide: function( event, ui ) {
    if ( absolutestartyr != undefined && ui.values[ 0 ] < parseInt(absolutestartyr) || absoluteendyr != undefined && ui.values[ 1 ] > parseInt(absoluteendyr)) {
      return false;
    }
    jq( "#year-range" ).val( ui.values[ 0 ] + "â€“" + ui.values[ 1 ] );
    startyr = ui.values[ 0 ], endyr = ui.values[ 1 ];
    updateFilters();
  }
});
jq( "#year-range" ).val( jq( "#slider-range" ).slider( "values", 0 ) +
  "â€“" + jq( "#slider-range" ).slider( "values", 1 ) );

function setupFilters() {
  var correspondents = _.sortBy( graph.nodes.filter(obj => { return obj.group == 2 }), 'label' )
  var dropdown = '<select name="correspondents_list" id="correspondents_list">';
  dropdown += '<option value="all">All correspondents</option>';    
  for (i=1; i<correspondents.length; i++){
    dropdown += '<option value="'+correspondents[i].id+'">'+truncateString(correspondents[i].label,30)+'</option>';    
  }
  dropdown += '</select>'
  jq( "#correspondents" ).append( dropdown );
}

jq(document.body).on('change', 'select#correspondents_list' , function() {
  startyr = 1734, endyr = 1771;
  absolutestartyr = undefined, absoluteendyr = undefined;
  if ( document.getElementById("correspondents_list").selectedIndex == 0 ) {
    jq( "#slider-range" ).slider("values", [startyr, endyr]);
    jq( "#year-range" ).val( startyr + "â€“" + endyr );
  }
  updateFilters();
});

// truncate a string
function truncateString(str, num) {
  if ( str ) {
    if (str.length <= num) {
      return str;
    }
    return str.slice(0, num) + '...';
  } else return '';
}

var color = {}
color[1] = 'darkblue'; // Gray
color[2] = 'darkorange'; // correspondents
color[3] = '#b5838d'; // topic: literary
color[4] = '#ffcdb2'; // topic: people
color[5] = '#e5989b'; // topic: locations
color[6] = '#6d6875'; // topic: Gray's poems
color[7] = '#ffb4a2'; // topic: Gray's published editions

var editions = {}
editions[ "1753" ]  = { "label": '<i>Designs by Mr. R. Bentley (1753)</i>' }
editions[ "1757" ]  = { "label": '<i>Odes by Mr. Gray (1757)</i>' }
editions[ "1768" ]  = { "label": '<i>Poems by Mr. Gray (Dodsley, 1768)</i>' }
editions[ "1768a" ] = { "label": '<i>Poems by Mr. Gray (Foulis, 1768)</i>' }

var poems = {}
poems[ "agtr" ] = { "label": '<i>Agrippina</i>' }
poems[ "aleg" ] = { "label": '<i>[The Alliance of Education and Government]</i>' }
poems[ "bapo" ] = { "label": 'The Bard' }
poems[ "cand" ] = { "label": 'The Candidate' }
poems[ "chcc" ] = { "label": 'The Characters of the Christ-Cross Row' }
poems[ "elcc" ] = { "label": 'Elegy Written in a Country Churchyard' }
poems[ "epld" ] = { "label": '[Epitaph on a Child]' }
poems[ "epmc" ] = { "label": '[Epitaph on Mrs Clerke]' }
poems[ "epww" ] = { "label": '[Epitaph on Sir William Williams]' }
poems[ "imp2" ] = { "label": '[Imitated] From Propertius. Lib: 2: Eleg: 1.' }
poems[ "imp3" ] = { "label": 'Imitated from Propertius, Lib: 3: Eleg: 5:' }
poems[ "inaw" ] = { "label": 'Inscription for a Wood in a Park' }
poems[ "inma" ] = { "label": '[Invitation to Mason]' }
poems[ "lobt" ] = { "label": '[Lines Written at Burnham]' }
poems[ "lojd" ] = { "label": '[Lines Spoken by the Ghost of John Dennis at the Devil Tavern]' }
poems[ "lost" ] = { "label": 'A Long Story' }
poems[ "lt01" ] = { "label": 'Ad C: Favonium Aristium' }
poems[ "lt02" ] = { "label": 'Ad C: Favonium Zephyrinum' }
poems[ "lt03" ] = { "label": '[Alcaic Fragment]' }
poems[ "lt05" ] = { "label": '<i>De Principiis Cogitandi. Liber Primus</i>' }
poems[ "lt07" ] = { "label": '[Elegiac Verses]' }
poems[ "lt08" ] = { "label": '[Farewell to Florence]' }
poems[ "lt10" ] = { "label": '[The Gaurus]' }
poems[ "lt12" ] = { "label": '[Horridos tractus]' }
poems[ "lt13" ] = { "label": '[Hymeneal]' }
poems[ "lt14" ] = { "label": 'Imitated [from Buondelmonte]' }
poems[ "lt18" ] = { "label": '[Latin verses at Eton]' }
poems[ "lt23" ] = { "label": '[Sophonisba Masinissae]' }
poems[ "ocmu" ] = { "label": '<i>Ode for Music</i>' }
poems[ "odec" ] = { "label": 'Ode on a Distant Prospect of Eton College' }
poems[ "odfc" ] = { "label": 'Ode on the Death of a Favourite Cat, Drowned in a Tub of Gold Fishes' }
poems[ "oots" ] = { "label": 'Ode on the Spring' }
poems[ "otad" ] = { "label": 'Ode to Adversity' }
poems[ "oxst" ] = { "label": "On L[or]d H[olland']s Seat near M[argat]e, K[en]t" }
poems[ "pare" ] = { "label": '[Parody on an Epitaph]' }
poems[ "pppo" ] = { "label": 'The Progress of Poesy' }
poems[ "skoc" ] = { "label": '[Sketch of his Own Character]' }
poems[ "sorw" ] = { "label": 'Sonnet [on the Death of Mr Richard West]' }
poems[ "stbe" ] = { "label": 'Stanzas to Mr Bentley' }
poems[ "tapr" ] = { "label": '[Tophet]' }
poems[ "tra6" ] = { "label": '[Translation from Statius, Thebaid VI]' }
poems[ "tra9" ] = { "label": '[Translation from Statius, Thebaid IX]' }
poems[ "trgl" ] = { "label": '[Translation] From Tasso [Gerusalemme Liberata]' }
poems[ "wsma" ] = { "label": 'William Shakespeare to Mrs Anne' }

</script>

<!--#include virtual="/bottom.shtml" -->
